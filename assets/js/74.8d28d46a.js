(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{427:function(t,a,r){"use strict";r.r(a);var e=r(56),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"git常用命令-及-gitignore的配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令-及-gitignore的配置"}},[t._v("#")]),t._v(" git常用命令，及.gitignore的配置")]),t._v(" "),r("p",[r("a",{attrs:{name:"Z47YP"}})]),t._v(" "),r("h2",{attrs:{id:"快捷通道"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#快捷通道"}},[t._v("#")]),t._v(" 快捷通道")]),t._v(" "),r("ul",[r("li",[t._v("git add . （将新建的纳入git管理)")]),t._v(" "),r("li",[t._v("git status （查看文件在git仓库中的状态)")]),t._v(" "),r("li",[t._v('git commit -m "提交修改的信息说明"  (完成了首次提交)')]),t._v(" "),r("li",[t._v("git push  (Git会把master分支推送到远程库对应的远程分支上)")]),t._v(" "),r("li",[t._v("git pull  (拉取更新)")]),t._v(" "),r("li",[t._v("git fetch --all")]),t._v(" "),r("li",[t._v("git push origin 当前分支名:远程新的分支名")])]),t._v(" "),r("p",[r("a",{attrs:{name:"P826A"}})]),t._v(" "),r("h2",{attrs:{id:"处理问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#处理问题"}},[t._v("#")]),t._v(" 处理问题")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",{staticStyle:{"text-align":"center"}},[t._v("问题提示")]),t._v(" "),r("th",{staticStyle:{"text-align":"center"}},[t._v("问题原因")]),t._v(" "),r("th",{staticStyle:{"text-align":"center"}},[t._v("解决办法")])])]),t._v(" "),r("tbody",[r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("git push github失败，提示：SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("发现是因为Git的Http代理的问题，Git支持三种协议：git://、ssh://和http://，本来push的时候应该走"),r("a",{attrs:{href:"https://www.baidu.com/s?wd=ssh%E9%9A%A7%E9%81%93&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd",target:"_blank",rel:"noopener noreferrer"}},[t._v("ssh隧道"),r("OutboundLink")],1),t._v("的，但是因为设置了http代理，所以就走了http的代理，于是就提交不了了。 OK，找到原因了，那就取消http代理吧")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("在代码目录执行git config --global --unset http.proxy就可以了")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("Windows git：致命：遇到TaskCanceledException？"),r("br"),t._v("Fatal: TaskCanceledException encountered.")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}}),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[r("code",[t._v("git config --list --system")]),r("br"),r("code",[t._v("git config --list --global")]),r("br"),t._v("设置下方命令"),r("br"),t._v("git config --system --unset credential.helper")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}}),t._v(" "),r("td",{staticStyle:{"text-align":"center"}}),t._v(" "),r("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),r("p",[r("br"),t._v("要很好的掌握Git，先要明白四个名词概念："),r("br")]),t._v(" "),r("ul",[r("li",[t._v("Workspace（工作区）：新添加的，和修改的未add操作的。")]),t._v(" "),r("li",[t._v("Stage（暂存区）：add操作过后，会进入暂存区。")]),t._v(" "),r("li",[t._v("Repository(本地仓库)：commit操作后，会进入本地仓库。")]),t._v(" "),r("li",[t._v("Remote(远程仓库)：push操作后，会提交到远程仓库。")])]),t._v(" "),r("p",[r("a",{attrs:{name:"W3e3v"}})]),t._v(" "),r("h2",{attrs:{id:"git的配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git的配置"}},[t._v("#")]),t._v(" Git的配置")]),t._v(" "),r("blockquote",[r("h1",{attrs:{id:"显示当前的git配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#显示当前的git配置"}},[t._v("#")]),t._v(" 显示当前的Git配置")]),t._v(" "),r("p",[t._v('$ git config --list\n#设置用户名和邮箱，即提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"')])]),t._v(" "),r("p",[r("a",{attrs:{name:"nstuY"}})]),t._v(" "),r("h2",{attrs:{id:"git操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git操作"}},[t._v("#")]),t._v(" Git操作")]),t._v(" "),r("p",[r("a",{attrs:{name:"VL47R"}})]),t._v(" "),r("h4",{attrs:{id:"添加-删除文件-add"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#添加-删除文件-add"}},[t._v("#")]),t._v(" 添加/删除文件(add）")]),t._v(" "),r("blockquote",[r("p",[t._v("#可以添加一个或多个\n$ git add  ...\n#添加所有修改的和新添加的\n$ git add .\n#另一种写法\n$ git add -A\n#添加指定目录\n$ git add\n#由暂存区恢复到工作区（发现提交错了，退回一步）\n$ git reset HEAD\n#恢复上一次add提交的所有file\n$ git reset HEAD\n#撤销修改操作，恢复到修改之前的，撤销add后位于工作区下进行的\n$ git checkout --\n#删除文件,并将文件放入暂存区\n$ git rm\n#改文件名，并将修改后的文件放入暂存区\n$ git mv")])]),t._v(" "),r("p",[r("a",{attrs:{name:"lnRaj"}})]),t._v(" "),r("h4",{attrs:{id:"提交到本地仓库-commit"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提交到本地仓库-commit"}},[t._v("#")]),t._v(" 提交到本地仓库（commit）")]),t._v(" "),r("blockquote",[r("p",[t._v("#提交暂存区的所有文件(后面的message不可缺少)\n$ git commit -m\n#提交暂存区的指定文件\n$ git commit   -m")])]),t._v(" "),r("p",[r("a",{attrs:{name:"YdHof"}})]),t._v(" "),r("h4",{attrs:{id:"分支操作-branch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支操作-branch"}},[t._v("#")]),t._v(" 分支操作（branch）")]),t._v(" "),r("blockquote",[r("h1",{attrs:{id:"列出所有本地分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#列出所有本地分支"}},[t._v("#")]),t._v(" 列出所有本地分支")]),t._v(" "),r("p",[t._v("$ git branch")]),t._v(" "),r("h1",{attrs:{id:"列出所有远程分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#列出所有远程分支"}},[t._v("#")]),t._v(" 列出所有远程分支")]),t._v(" "),r("p",[t._v("$ git branch -r")]),t._v(" "),r("h1",{attrs:{id:"列出所有本地分支和远程分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#列出所有本地分支和远程分支"}},[t._v("#")]),t._v(" 列出所有本地分支和远程分支")]),t._v(" "),r("p",[t._v("$ git branch -a")]),t._v(" "),r("h1",{attrs:{id:"新建一个分支-并切换到该分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#新建一个分支-并切换到该分支"}},[t._v("#")]),t._v(" 新建一个分支，并切换到该分支")]),t._v(" "),r("p",[t._v("$ git checkout -b [branch]")]),t._v(" "),r("h1",{attrs:{id:"切换到指定分支-并更新工作区"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#切换到指定分支-并更新工作区"}},[t._v("#")]),t._v(" 切换到指定分支，并更新工作区")]),t._v(" "),r("p",[t._v("$ git checkout [branch-name]\n#从远程分支检出指定分支\n$ git clone -b")]),t._v(" "),r("h1",{attrs:{id:"合并指定分支到当前分支-主分支合并自定义分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#合并指定分支到当前分支-主分支合并自定义分支"}},[t._v("#")]),t._v(" 合并指定分支到当前分支（主分支合并自定义分支）")]),t._v(" "),r("p",[t._v("$ git merge [branch]")]),t._v(" "),r("h1",{attrs:{id:"删除分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),r("p",[t._v("$ git branch -d [branch-name]")]),t._v(" "),r("h1",{attrs:{id:"删除远程分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除远程分支"}},[t._v("#")]),t._v(" 删除远程分支")]),t._v(" "),r("p",[t._v("$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]")])]),t._v(" "),r("p",[r("a",{attrs:{name:"8ef0b394"}})]),t._v(" "),r("h4",{attrs:{id:"查看信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[t._v("#")]),t._v(" 查看信息")]),t._v(" "),r("blockquote",[r("h1",{attrs:{id:"显示有变更的文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#显示有变更的文件"}},[t._v("#")]),t._v(" 显示有变更的文件")]),t._v(" "),r("p",[t._v("$ git status")]),t._v(" "),r("h1",{attrs:{id:"显示当前分支的版本历史"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#显示当前分支的版本历史"}},[t._v("#")]),t._v(" 显示当前分支的版本历史")]),t._v(" "),r("p",[t._v("$ git log")])]),t._v(" "),r("p",[r("a",{attrs:{name:"jZIvo"}})]),t._v(" "),r("h4",{attrs:{id:"远程同步"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#远程同步"}},[t._v("#")]),t._v(" 远程同步")]),t._v(" "),r("blockquote",[r("h1",{attrs:{id:"下载远程仓库的所有变动"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#下载远程仓库的所有变动"}},[t._v("#")]),t._v(" 下载远程仓库的所有变动")]),t._v(" "),r("p",[t._v("$ git fetch [remote]")]),t._v(" "),r("h1",{attrs:{id:"显示所有远程仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#显示所有远程仓库"}},[t._v("#")]),t._v(" 显示所有远程仓库")]),t._v(" "),r("p",[t._v("$ git remote -v")]),t._v(" "),r("h1",{attrs:{id:"显示某个远程仓库的信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#显示某个远程仓库的信息"}},[t._v("#")]),t._v(" 显示某个远程仓库的信息")]),t._v(" "),r("p",[t._v("$ git remote show [remote]")]),t._v(" "),r("h1",{attrs:{id:"增加一个新的远程仓库-并命名"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#增加一个新的远程仓库-并命名"}},[t._v("#")]),t._v(" 增加一个新的远程仓库，并命名")]),t._v(" "),r("p",[t._v("$ git remote add [shortname] [url]")]),t._v(" "),r("h1",{attrs:{id:"取回远程仓库的变化-并与本地分支合并"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#取回远程仓库的变化-并与本地分支合并"}},[t._v("#")]),t._v(" 取回远程仓库的变化，并与本地分支合并")]),t._v(" "),r("p",[t._v("$ git pull [remote] [branch]")]),t._v(" "),r("h1",{attrs:{id:"上传本地指定分支到远程仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#上传本地指定分支到远程仓库"}},[t._v("#")]),t._v(" 上传本地指定分支到远程仓库")]),t._v(" "),r("p",[t._v("$ git push [remote] [branch]")]),t._v(" "),r("h1",{attrs:{id:"强行推送当前分支到远程仓库-即使有冲突"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#强行推送当前分支到远程仓库-即使有冲突"}},[t._v("#")]),t._v(" 强行推送当前分支到远程仓库，即使有冲突")]),t._v(" "),r("p",[t._v("$ git push [remote] --force")]),t._v(" "),r("h1",{attrs:{id:"推送所有分支到远程仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#推送所有分支到远程仓库"}},[t._v("#")]),t._v(" 推送所有分支到远程仓库")]),t._v(" "),r("p",[t._v("$ git push [remote] --all")])]),t._v(" "),r("br"),t._v(" "),r("a",{attrs:{name:"V1U27"}}),t._v("\n#### git 推送本地分支到远程分支 git push origin\n"),r("p",[r("br"),t._v("推送本地分支local_branch到远程分支 remote_branch并建立关联关系"),r("br")]),t._v(" "),r("ol",[r("li",[t._v("a.远程已有remote_branch分支并且已经关联本地分支local_branch且本地已经切换到local_branch")])]),t._v(" "),r("p",[t._v("git push"),r("br")]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("b.远程已有remote_branch分支但未关联本地分支local_branch且本地已经切换到local_branch")])]),t._v(" "),r("p",[t._v("git push -u origin/remote_branch"),r("br")]),t._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[t._v("c.远程没有有remote_branch分支并，本地已经切换到local_branch")])]),t._v(" "),r("p",[t._v("git push origin local_branch:remote_branch"),r("br")]),t._v(" "),r("p",[r("a",{attrs:{name:"qU8ZN"}})]),t._v(" "),r("h4",{attrs:{id:"标签-tag"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#标签-tag"}},[t._v("#")]),t._v(" 标签（tag）")]),t._v(" "),r("blockquote",[r("h1",{attrs:{id:"列出所有tag"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#列出所有tag"}},[t._v("#")]),t._v(" 列出所有tag")]),t._v(" "),r("p",[t._v("$ git tag")]),t._v(" "),r("h1",{attrs:{id:"新建一个tag在当前commit"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#新建一个tag在当前commit"}},[t._v("#")]),t._v(" 新建一个tag在当前commit")]),t._v(" "),r("p",[t._v("$ git tag [tag]")]),t._v(" "),r("h1",{attrs:{id:"新建一个tag在指定commit"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#新建一个tag在指定commit"}},[t._v("#")]),t._v(" 新建一个tag在指定commit")]),t._v(" "),r("p",[t._v("$ git tag [tag] [commit]")]),t._v(" "),r("h1",{attrs:{id:"删除本地tag"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除本地tag"}},[t._v("#")]),t._v(" 删除本地tag")]),t._v(" "),r("p",[t._v("$ git tag -d [tag]")]),t._v(" "),r("h1",{attrs:{id:"删除远程tag"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除远程tag"}},[t._v("#")]),t._v(" 删除远程tag")]),t._v(" "),r("p",[t._v("$ git push origin :refs/tags/[tagName]")]),t._v(" "),r("h1",{attrs:{id:"查看tag信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看tag信息"}},[t._v("#")]),t._v(" 查看tag信息")]),t._v(" "),r("p",[t._v("$ git show [tag]")]),t._v(" "),r("h1",{attrs:{id:"提交指定tag"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提交指定tag"}},[t._v("#")]),t._v(" 提交指定tag")]),t._v(" "),r("p",[t._v("$ git push [remote] [tag]")]),t._v(" "),r("h1",{attrs:{id:"提交所有tag"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提交所有tag"}},[t._v("#")]),t._v(" 提交所有tag")]),t._v(" "),r("p",[t._v("$ git push [remote] --tags")]),t._v(" "),r("h1",{attrs:{id:"新建一个分支-指向某个tag"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#新建一个分支-指向某个tag"}},[t._v("#")]),t._v(" 新建一个分支，指向某个tag")]),t._v(" "),r("p",[t._v("$ git checkout -b [branch] [tag]")])]),t._v(" "),r("p",[r("a",{attrs:{name:"LK4yy"}})]),t._v(" "),r("h4",{attrs:{id:"其他"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),r("blockquote",[r("h1",{attrs:{id:"生成一个可供发布的压缩包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生成一个可供发布的压缩包"}},[t._v("#")]),t._v(" 生成一个可供发布的压缩包")]),t._v(" "),r("p",[t._v("$ git archive")])]),t._v(" "),r("p",[r("a",{attrs:{name:"pSxwp"}})]),t._v(" "),r("h2",{attrs:{id:"gitignore"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[t._v("#")]),t._v(" .gitignore")]),t._v(" "),r("p",[r("a",{attrs:{name:"z0tWy"}})]),t._v(" "),r("h4",{attrs:{id:"gitignore的配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gitignore的配置"}},[t._v("#")]),t._v(" .gitignore的配置")]),t._v(" "),r("blockquote",[r("p",[t._v("/build\n/.idea\n/.gradle\n/local.properties\n.gitignore")])]),t._v(" "),r("p",[r("a",{attrs:{name:"OIujl"}})]),t._v(" "),r("h4",{attrs:{id:"用法规则和语义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用法规则和语义"}},[t._v("#")]),t._v(" 用法规则和语义")]),t._v(" "),r("blockquote",[r("h1",{attrs:{id:"此为注释-将被-git-忽略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#此为注释-将被-git-忽略"}},[t._v("#")]),t._v(" 此为注释 – 将被 Git 忽略")]),t._v(" "),r("p",[r("em",[t._v(".a # 忽略所有 .a 结尾的文件\n!lib.a # 但 lib.a 除外\n/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\nbuild/ # 忽略 build/ 目录下的所有文件\ndoc/")]),t._v(".txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt")])]),t._v(" "),r("p",[r("a",{attrs:{name:"jYRTe"}})]),t._v(" "),r("h2",{attrs:{id:"commit-message-和-change-log"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#commit-message-和-change-log"}},[t._v("#")]),t._v(" Commit message 和 Change log")]),t._v(" "),r("p",[r("a",{attrs:{name:"vjA8N"}})]),t._v(" "),r("h4",{attrs:{id:"commit规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#commit规范"}},[t._v("#")]),t._v(" commit规范")]),t._v(" "),r("p",[r("br"),r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/124615/1562306730234-17d3d145-e060-48bd-ad3c-00d4353df602.png#align=left&display=inline&height=678&originHeight=678&originWidth=700&size=0&status=done&style=none&width=700",alt:""}}),r("br"),t._v("本文介绍Angular 规范（见上图）")]),t._v(" "),r("p",[t._v("每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。")]),t._v(" "),r("div",{staticClass:"language-html extra-class"},[r("pre",{pre:!0,attrs:{class:"language-html"}},[r("code",[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("type")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("("),r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("): "),r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("subject")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n// 空一行\n"),r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n// 空一行\n"),r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("footer")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),r("p",[t._v("其中，Header 是必需的，Body 和 Footer 可以省略。"),r("br"),t._v("不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。"),r("br")]),t._v(" "),r("p",[r("a",{attrs:{name:"s9bzF"}})]),t._v(" "),r("h4",{attrs:{id:"header"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#header"}},[t._v("#")]),t._v(" Header")]),t._v(" "),r("p",[t._v("Header部分只有一行，包括三个字段："),r("strong",[t._v("type（必需）")]),t._v("、"),r("strong",[t._v("scope（可选）"),r("strong",[t._v("和")]),t._v("subject（必需）")]),t._v("。"),r("br"),t._v(" "),r("br"),t._v("**type--**用于说明 commit 的类别，只允许使用下面7个标识。")]),t._v(" "),r("ul",[r("li",[t._v("feat：新功能（feature）")]),t._v(" "),r("li",[t._v("fix：修补bug")]),t._v(" "),r("li",[t._v("docs：文档（documentation）")]),t._v(" "),r("li",[t._v("style： 格式（不影响代码运行的变动）")]),t._v(" "),r("li",[t._v("refactor：重构（即不是新增功能，也不是修改bug的代码变动）")]),t._v(" "),r("li",[t._v("test：增加测试")]),t._v(" "),r("li",[t._v("chore：构建过程或辅助工具的变动")])]),t._v(" "),r("p",[t._v("如果"),r("strong",[t._v("type")]),t._v("为"),r("strong",[t._v("feat")]),t._v("和"),r("strong",[t._v("fix")]),t._v("，则该 commit 将肯定出现在 **Change log **之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。"),r("br"),t._v(" "),r("br"),t._v("**scope--**用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。"),r("br"),t._v(" "),r("br"),t._v("**subject--**是 commit 目的的简短描述，不超过50个字符。")]),t._v(" "),r("ul",[r("li",[t._v("以动词开头，使用第一人称现在时，比如"),r("code",[t._v("change")]),t._v("，而不是"),r("code",[t._v("changed")]),t._v("或"),r("code",[t._v("changes")])]),t._v(" "),r("li",[t._v("第一个字母小写")]),t._v(" "),r("li",[t._v("结尾不加句号（"),r("code",[t._v(".")]),t._v("）")])]),t._v(" "),r("p",[r("a",{attrs:{name:"dsYyU"}})]),t._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"https://blog.csdn.net/zxyudia/article/details/67633321",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git的一些常用命令，及.gitignore的配置"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Commit message 和 Change log 编写指南"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://blog.csdn.net/torpidcat/article/details/81252505",target:"_blank",rel:"noopener noreferrer"}},[t._v("git 推送本地分支到远程分支 git push origin"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=s.exports}}]);