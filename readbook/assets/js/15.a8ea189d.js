(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{226:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"认识单元测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识单元测试","aria-hidden":"true"}},[t._v("#")]),t._v(" 认识单元测试")]),t._v(" "),a("p",[t._v("单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义。")]),t._v(" "),a("p",[t._v("在 web 前端领域，单元测试通常包括：对某个 JS 的方法进行测试，对某个组件进行测试。除了单元测试，前端经常会有端到端测试。相对于端到端测试来说，单元测试编写更复杂。但是完整的单元测试的样例能够覆盖更多端到端测试覆盖不到的点，对于前端代码通常比较关键的模块可以通过添加单元测试来规避后续修改或者重构带来的风险。单元测试样例的编写过程也有助于进一步审视模块的功能。")]),t._v(" "),a("p",[t._v("单元测试适用于功能不会经常改动的工具方法模块和一些基础的公共组件，对于会经常在快速迭代中更新的业务组件和功能模块端到端的测试会更适合，但这并不是说不需要写单元测试。这其实是一个投入和产出比的一个权衡，编写单元测试可能会需要频繁的更新测试样例，对于部分业务尤其是中后台的应用来说成本是偏高的。")]),t._v(" "),a("p",[t._v("本章主要针对单元测试进行介绍，更多的端到端测试的内容还在编写中，尽请期待。")]),t._v(" "),a("h2",{attrs:{id:"前端怎么做单测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端怎么做单测","aria-hidden":"true"}},[t._v("#")]),t._v(" 前端怎么做单测")]),t._v(" "),a("p",[t._v("在 React 诞生之前，前端的单元测试往往只能针对于一些纯粹的 JS 模块。由于对浏览器环境的依赖，很难去做涉及到 dom 操作的模块的单元测试。但是对于前端来说，大部分代码其实都是 UI 组件，这就导致长期以来前端的代码甚至一些开源的被应用得很广泛的 UI 组件库都缺乏完整的单元测试。")]),t._v(" "),a("p",[t._v("但是 React 的诞生伴随着虚拟 dom 被发明，这使得前端组件的测试变得更方便了。虚拟 dom 使得一个组件可以脱离真实的浏览器环境模拟 dom 的相关操作。我们可以通过测试虚拟 dom 的表现是否正常来测试组件的逻辑，让编写组件的测试能够脱离对浏览器 dom 环境的依赖。")]),t._v(" "),a("p",[t._v("在 umi 中，内置了 jest 作为单元测试的库，接下来我们会介绍如何使用 jest 对 JS 方法或者组件进行测试。")]),t._v(" "),a("h2",{attrs:{id:"使用-jest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-jest","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用 jest")]),t._v(" "),a("p",[t._v("umi 内置了 "),a("a",{attrs:{href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("jest"),a("OutboundLink")],1),t._v(" 测试。执行 "),a("code",[t._v("umi test")]),t._v(" 会匹配所有 "),a("code",[t._v(".test.js")]),t._v(" 结尾的文件运行。通常我们约定把测试的代码统一放到 "),a("code",[t._v("test")]),t._v(" 文件夹下，当然你也可以按照你的习惯组织，比如可以和测试对应的模块放到一起。")]),t._v(" "),a("h3",{attrs:{id:"配置-jest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-jest","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置 jest")]),t._v(" "),a("p",[t._v("jest 是 Facebook 退出的一个开源的测试框架，它有它自己的配置。它约定了它的配置可以在 "),a("code",[t._v("package.json")]),t._v(" 中，也可以在项目根目录的 "),a("code",[t._v("jest.config.js")]),t._v(" 中。在该课程中我们以 "),a("code",[t._v("jest.config.js")]),t._v(" 来做示例，它是 jest 的默认配置文件，当然你也可以 jest 提供的方式指定配置文件，可以参考 jest 的"),a("a",{attrs:{href:"https://jestjs.io/docs/en/22.1/configuration",target:"_blank",rel:"noopener noreferrer"}},[t._v("配置文档"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("那么，让我们在项目的根目录下添加一个 "),a("code",[t._v("jest.config.js")]),t._v("，并填上内容如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要注意的是这里不能使用 export default 这样的 ES6 的语法，因为它是被 jest 直接读取的，不会被 umi 编译。")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  testURL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:7001'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("其实 jest 的配置不是必须的，在下面的示例中的第一个示例 "),a("code",[t._v("测试一个方法")]),t._v(" 中其实是不需要的。但是在 "),a("code",[t._v("测试一个组件")]),t._v(" 中因为我们引入了 "),a("code",[t._v("enzyme")]),t._v(" 来测试组件。最新版的 "),a("code",[t._v("enzyme")]),t._v(" 依赖浏览器的 "),a("code",[t._v("localStorage")]),t._v(" 等环境，而 jest 中 "),a("code",[t._v("testURL")]),t._v(" 的默认值是 "),a("code",[t._v("about:blank")]),t._v("，这样会导致运行时报错，设置了 "),a("code",[t._v("testURL")]),t._v(" 为一个有效的 URL 后能够避免这个问题。当然不一定必须是 "),a("code",[t._v("http://localhost:7001")]),t._v("，只要是合法的 URL 地址即可。不过这不意味着 "),a("code",[t._v("testURL")]),t._v(" 是没有意义的，实际上 "),a("code",[t._v("testURL")]),t._v(" 还有其他作用，你可以参考它的"),a("a",{attrs:{href:"https://jestjs.io/docs/en/22.1/configuration#testurl-string",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档说明"),a("OutboundLink")],1),t._v("查看具体内容。")]),t._v(" "),a("h3",{attrs:{id:"测试一个方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试一个方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 测试一个方法")]),t._v(" "),a("p",[t._v("jest 在执行测试文件的时候会默认注入一些方法，对于最简单的测试，你只需要了解 "),a("code",[t._v("test")]),t._v(" 和 "),a("code",[t._v("expect")]),t._v(" 这两个方法即可。 "),a("code",[t._v("test")]),t._v(" 方法接收两个参数，第一个是测试描述，第二个是一个函数，它包裹了一个测试样例。在这个样例中你可以调用 "),a("code",[t._v("expect")]),t._v(" 方法检测你的代码。比如，我们新建一个 "),a("code",[t._v("test/helloworld.test.js")]),t._v(" 的文件，然后写上如下的内容：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'adds 1 + 2 to equal 3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toBe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在 "),a("code",[t._v("package.json")]),t._v(" 中添加 "),a("code",[t._v("scripts.test")]),t._v(" 为 "),a("code",[t._v("umi test")]),t._v("，然后运行 "),a("code",[t._v("cnpm run test")]),t._v("。接下来你就能看到如下的结果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.yuque.com/lark/0/2018/png/46271/1531992781171-2a24740f-d4a0-4241-bd2c-57793c7dcf82.png",alt:"result"}})]),t._v(" "),a("h3",{attrs:{id:"测试一个组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试一个组件","aria-hidden":"true"}},[t._v("#")]),t._v(" 测试一个组件")]),t._v(" "),a("p",[t._v("接下来我们尝试测试一个最简单的组件，首先我们在 "),a("code",[t._v("src/component")]),t._v(" 下面新建一个 "),a("code",[t._v("TestDemo.js")]),t._v(" 的组件，组件内容如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("然后我们在 "),a("code",[t._v("test/helloworld.test.js")]),t._v(" 中添加对它的测试。在这之前你需要先安装 "),a("a",{attrs:{href:"http://airbnb.io/enzyme/",target:"_blank",rel:"noopener noreferrer"}},[t._v("测试一个组件"),a("OutboundLink")],1),t._v(" 包，它是针对 React 的测试工具库，使得我们可以很方便的利用 React 虚拟 dom 来编写测试样例。")]),t._v(" "),a("p",[t._v("在项目根目录下执行：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("cnpm i --save-dev enzyme enzyme-adapter-react-16\n")])])]),a("p",[t._v("然后添加如下的测试样例：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mount "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'enzyme'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" TestDemo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../src/component/TestDemo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'TestDemo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" wrapper "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TestDemo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wrapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toBe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("然后运行 "),a("code",[t._v("cnpm run test")]),t._v(" 就可以看到结果了。")]),t._v(" "),a("p",[t._v("enzyme 提供了大量的方法可以让你能够测试组件中的内容，更多信息可以参考 enzyme 的"),a("a",{attrs:{href:"http://airbnb.io/enzyme/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),a("OutboundLink")],1),t._v("。")])])},[],!1,null,null,null);s.default=e.exports}}]);