(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{210:function(e,a,t){"use strict";t.r(a);var v=t(2),_=Object(v.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"前端开发的演变"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端开发的演变","aria-hidden":"true"}},[e._v("#")]),e._v(" 前端开发的演变")]),e._v(" "),t("p",[e._v("本文介绍前端开发的历史和趋势，帮助大家了解 React 要解决什么问题。")]),e._v(" "),t("h2",{attrs:{id:"静态页面阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态页面阶段","aria-hidden":"true"}},[e._v("#")]),e._v(" 静态页面阶段")]),e._v(" "),t("p",[e._v("互联网发展的早期，网站的前后端开发是一体的，即前端代码是后端代码的一部分。")]),e._v(" "),t("ol",[t("li",[e._v("后端收到浏览器的请求")]),e._v(" "),t("li",[e._v("生成静态页面")]),e._v(" "),t("li",[e._v("发送到浏览器")])]),e._v(" "),t("p",[e._v("那时的前端页面都是静态的，所有前端代码和前端数据都是后端生成的。前端只是纯粹的展示功能，脚本的作用只是增加一些特殊效果，比如那时很流行用脚本控制页面上飞来飞去的广告。")]),e._v(" "),t("p",[e._v("那时的网站开发，采用的是后端 MVC 模式。")]),e._v(" "),t("ul",[t("li",[e._v("Model（模型层）：提供/保存数据")]),e._v(" "),t("li",[e._v("Controller（控制层）：数据处理，实现业务逻辑")]),e._v(" "),t("li",[e._v("View（视图层）：展示数据，提供用户界面")])]),e._v(" "),t("p",[e._v("前端只是后端 MVC 的 V。")]),e._v(" "),t("h2",{attrs:{id:"ajax-阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ajax-阶段","aria-hidden":"true"}},[e._v("#")]),e._v(" AJAX 阶段")]),e._v(" "),t("p",[e._v("2004年，AJAX 技术诞生，改变了前端开发。Gmail 和 Google 地图这样革命性的产品出现，使得开发者发现，前端的作用不仅仅是展示页面，还可以管理数据并与用户互动。")]),e._v(" "),t("p",[e._v("AJAX 技术指的是脚本独立向服务器请求数据，拿到数据以后，进行处理并更新网页。整个过程中，后端只是负责提供数据，其他事情都由前端处理。前端不再是后端的模板，而是实现了从“获取数据 --》 处理数据 --》展示数据”的完整业务逻辑。")]),e._v(" "),t("p",[e._v("就是从这个阶段开始，前端脚本开始变得复杂，不再仅仅是一些玩具性的功能。")]),e._v(" "),t("h2",{attrs:{id:"前端-mvc-阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端-mvc-阶段","aria-hidden":"true"}},[e._v("#")]),e._v(" 前端 MVC 阶段")]),e._v(" "),t("p",[e._v("前端代码有了读写数据、处理数据、生成视图等功能，因此迫切需要辅助工具，方便开发者组织代码。这导致了前端 MVC 框架的诞生。")]),e._v(" "),t("p",[e._v("2010年，第一个前端 MVC 框架 Backbone.js 诞生。它基本上是把 MVC 模式搬到了前端，但是只有 M （读写数据）和 V（展示数据），没有 C（处理数据）。因为，Backbone 认为前端 Controller 与后端不同，不需要、也不应该处理业务逻辑，只需要处理 UI 逻辑，响应用户的一举一动。所以，数据处理都放在后端，前端只用事件响应处理 UI 逻辑（用户操作）。")]),e._v(" "),t("p",[e._v("后来，更多的前端 MVC 框架出现。另一些框架提出 MVVM 模式，用 View Model 代替 Controller。MVVM 模式也将前端应用分成三个部分。")]),e._v(" "),t("ul",[t("li",[e._v("Model：读写数据")]),e._v(" "),t("li",[e._v("View：展示数据")]),e._v(" "),t("li",[e._v("View-Model：数据处理")])]),e._v(" "),t("p",[e._v("View Model 是简化的 Controller，所有的数据逻辑都放在这个部分。它的唯一作用就是为 View 提供处理好的数据，不含其他逻辑。也就是说，Model 拿到数据以后，View Model 将数据处理成视图层（View）需要的格式，在视图层展示出来。")]),e._v(" "),t("p",[e._v("这个模型的特点是 View 绑定 View Model。如果 View Model 的数据变了，View（视图层）也跟着变了；反之亦然，如果用户在视图层修改了数据，也立刻反映在 View Model。整个过程完全不需要手工处理。")]),e._v(" "),t("h2",{attrs:{id:"spa-阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spa-阶段","aria-hidden":"true"}},[e._v("#")]),e._v(" SPA 阶段")]),e._v(" "),t("p",[e._v("前端可以做到读写数据、切换视图、用户交互，这意味着，网页其实是一个应用程序，而不是信息的纯展示。这种单张网页的应用程序称为 SPA（single-page application）。")]),e._v(" "),t("p",[e._v("所谓 SPA，就是指在一张网页（single page）上，通过良好的体验，模拟出多页面应用程序（application）。用户的浏览器只需要将网页载入一次，然后所有操作都可以在这张页面上完成，带有迅速的响应和虚拟的页面切换。")]),e._v(" "),t("p",[e._v("随着 SPA 的兴起，2010年后，前端工程师从开发页面（切模板），逐渐变成了开发“前端应用”（跑在浏览器里面的应用程序）。")]),e._v(" "),t("p",[e._v("目前，最流行的前端框架 Vue、Angular、React 等等，都属于 SPA 开发框架。")]),e._v(" "),t("h2",{attrs:{id:"react-的定位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-的定位","aria-hidden":"true"}},[e._v("#")]),e._v(" React 的定位")]),e._v(" "),t("p",[e._v("我们这个 antd 教程基于 React 框架，所以要介绍一下 React 在前端技术里面的定位。")]),e._v(" "),t("p",[e._v("React 本身的定位很单纯，它是一个网页组件的解决方案。也就是说，它只解决怎么把复杂的页面拆分成一个个组件，然后一个个独立的组件又怎么拼装成可以互相协同的网页。")]),e._v(" "),t("p",[e._v("组件是中性的，任何一种应用架构都可以采用。因此，React 可以用于 MVC 架构，也可以用于 MVVM 架构，或者别的架构。")]),e._v(" "),t("p",[e._v("社区为 React 应用提出了很多架构解决方案，其中最流行的是 Facebook 公司提出的 Flux 架构，以及基于 Flux 的 Redux 架构。本教程就采用 Redux 架构，只是我们把它封装了，让大家可以最简单地开发出一个 React 应用，因为 Redux 架构涉及的概念较多，需要手写的代码量也比较大，还是较复杂的。通过我们封装的工具，可以大大简化开发工作量。")])])},[],!1,null,null,null);a.default=_.exports}}]);