(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{223:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"初始化项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化项目","aria-hidden":"true"}},[t._v("#")]),t._v(" 初始化项目")]),t._v(" "),s("p",[t._v("现在你已经了解了前端开发的基本概念，开始要进入实际项目了。这一节将教会大家如何初始化一个项目，开发出一个可以展示 "),s("code",[t._v("hello world")]),t._v(" 的项目。")]),t._v(" "),s("p",[t._v("这堂课程中的相关代码你都可以在 "),s("a",{attrs:{href:"https://github.com/ant-design/react-tutorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/ant-design/react-tutorial"),s("OutboundLink")],1),t._v(" 中拿到，当你无法参考文档完成你自己的代码时你可以以它作为一个参考。不过我们建议你尽可能的自己完成课程相关的代码，如果遇到了问题或者对课程有疑问可以在文档下方留言告知我们。")]),t._v(" "),s("h2",{attrs:{id:"为什么需要脚手架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要脚手架","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么需要脚手架")]),t._v(" "),s("p",[t._v("一个普通的网页基本都会包含 HTML，CSS 和 JS 三个关键的元素。这一点多年以来都是没有改变的，但是前端的开发模式已经发生了很大的变化。以往我们写的网页前端代码都是可以通过浏览器打开后能够直接运行的，但是现在对于大部分前端项目来说，我们写的代码其实并不是原生的 JS，HTML 和 CSS，而是基于它们扩展出来的更上层的语法。")]),t._v(" "),s("p",[t._v("本课程，我们将会大量编写 React 组件（实际上 antd 就是 Ant Design 的 React 组件的实现），这些组件需要通过编译为最终的 JS 和 CSS，然后引入到 HTML 网页中才能够被浏览器正确地执行。")]),t._v(" "),s("p",[t._v("由于存在一个编译过程，这就需要基于编译工具搭建一个项目的脚手架，使得我们可以通过工具实现代码的编译。通过编译后的代码才是浏览器能够执行的代码，这样我们才能进行项目的开发和最终的部署。")]),t._v(" "),s("h2",{attrs:{id:"编译工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译工具","aria-hidden":"true"}},[t._v("#")]),t._v(" 编译工具")]),t._v(" "),s("p",[t._v("前端开发不只涉及到 JS，同时还有 CSS、HTML、图片等资源，以及其他一些文件类型。比如：LESS 脚本可以提高 CSS 的编写效率，"),s("a",{attrs:{href:"typescript"}},[t._v("TypeScript")]),t._v(" 可以让你以一种全新的语法去编写你的逻辑。所有这些文件类型，都被纳入了前端研发体系。大部分编译工具都能够处理这些不同类型的资源文件。")]),t._v(" "),s("p",[t._v("开源社区的繁荣，一方面让我们可以有很多工具，但是同时也让项目初始化变得繁琐。")]),t._v(" "),s("p",[t._v("本课程选择使用 "),s("a",{attrs:{href:"https://umijs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("umi"),s("OutboundLink")],1),t._v(" 作为编译工具。其实 umi 不仅仅是一个编译工具，它同时也是一个前端框架。它对社区的 "),s("a",{attrs:{href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("webpack"),s("OutboundLink")],1),t._v("，"),s("a",{attrs:{href:"https://reacttraining.com/react-router/",target:"_blank",rel:"noopener noreferrer"}},[t._v("react-router"),s("OutboundLink")],1),t._v(" 等进行的封装，使得我们可以基于它快速搭建一个 React 项目。")]),t._v(" "),s("p",[t._v("umi 有各种类型的脚手架，方便你快速启动项目。本课程为了让读者能够更好地理解 umi 背后的逻辑，将从零开始初始化一个能够运行的脚手架。")]),t._v(" "),s("p",[t._v("下面，请大家跟着一起操作，完成之后将会得到一个最简单的应用：网页显示 "),s("code",[t._v("hello world")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化","aria-hidden":"true"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),s("h3",{attrs:{id:"目录结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),s("p",[t._v("在初始化完成后你将会得到如下的一个目录结构：")]),t._v(" "),s("pre",[s("code",[t._v("- antd-course\n  - config\n    - config.js\n  - src\n    - page\n      - HelloWorld.js\n  - package.json\n  - .gitignore\n  - node_modules\n")])]),t._v(" "),s("p",[t._v("该目录结构只是作为你后面的一个参考，你不必着急创建，只需要按照下面的步骤一步一步操作就可以创建出这最终的结构。")]),t._v(" "),s("h3",{attrs:{id:"开发环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发环境","aria-hidden":"true"}},[t._v("#")]),t._v(" 开发环境")]),t._v(" "),s("p",[t._v("首先，请安装 "),s("a",{attrs:{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"}},[t._v("NodeJS"),s("OutboundLink")],1),t._v("。NodeJS 是一个 JS 执行环境，umi 基于 JS 编写，并且需要在你的开发机上运行，所以依赖于它。")]),t._v(" "),s("p",[t._v("安装完成后，执行下面的命令确认是否安装成功。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("node -v\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" -v\n")])])]),s("blockquote",[s("p",[t._v("在 umi 中我们采用了一些 NodeJS 的新特性，请确保你的 NodeJS 版本大于等于 "),s("code",[t._v("8.5.0")]),t._v("。")])]),t._v(" "),s("p",[t._v("在国内，你可以安装 "),s("code",[t._v("cnpm")]),t._v(" 获得更快速、更安全的包管理体验。使用如下命令安装：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g cnpm --registry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("https://registry.npm.taobao.org\n")])])]),s("p",[t._v("然后你可以通过如下的命令确认是否成功：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("cnpm -v\n")])])]),s("p",[t._v("通过 cnpm 你可以很方便的安装和管理一些第三方的包。比如 umi 就将通过它来安装到你的项目。")]),t._v(" "),s("h3",{attrs:{id:"安装-umi-依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-umi-依赖","aria-hidden":"true"}},[t._v("#")]),t._v(" 安装 umi 依赖")]),t._v(" "),s("p",[t._v("首先，新建一个空的文件夹，用来存放本课程后续所有的代码。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" antd-course\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cd")]),t._v(" antd-course\n")])])]),s("p",[t._v("然后，调用 "),s("code",[t._v("cnpm init")]),t._v(" 来初始化 "),s("code",[t._v("package.json")]),t._v("，它是 NodeJS 约定的用来存放项目的信息和配置等信息的文件。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("cnpm init -y\n")])])]),s("p",[t._v("上面命令中，参数 "),s("code",[t._v("-y")]),t._v(" 表示对 npm 要求提供的信息，都自动按下回车键，表示接受默认值。")]),t._v(" "),s("p",[t._v("接着，安装 umi 的依赖。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("cnpm "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" umi --save-dev\n")])])]),s("p",[t._v("安装完成之后你会发现 "),s("code",[t._v("package.json")]),t._v(" 中多出了一项 "),s("code",[t._v("devDependencies")]),t._v(" 的配置。这是由于在上面命令中，参数 "),s("code",[t._v("--save")]),t._v(" 可以让依赖信息保存到 "),s("code",[t._v("package.json")]),t._v(" 中，这样其它开发者下载代码后就只需要执行 "),s("code",[t._v("cnpm install")]),t._v(" 后就会自动安装项目依赖的包。")]),t._v(" "),s("p",[t._v("另外项目中还多出了一个 "),s("code",[t._v("node_modules")]),t._v(" 的文件夹，它包含了大量的内容。里面存放的是项目依赖的包，umi 的代码也是被下载并安装到其中的。如果你想要了解更多，可以参考 "),s("a",{attrs:{href:"https://docs.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("npm 的文档"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"第一个页面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一个页面","aria-hidden":"true"}},[t._v("#")]),t._v(" 第一个页面")]),t._v(" "),s("p",[t._v("接下来，让我们创建我们的第一个页面。在创建第一个页面之前，我们需要先初始化 umi 的配置。")]),t._v(" "),s("p",[t._v("在 umi 中，大量的使用了配置和约定来帮助你快速开发代码。首先，我们先来创建配置文件。配置文件被约定为 "),s("code",[t._v("config/config.js")]),t._v("。为了让后面的开发更加高效，我们推荐你下载一款适合你的编辑器或者 IDE 来创建和编写代码。本课程中我们推荐你使用 "),s("a",{attrs:{href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("VS Code"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("在 umi 中，你也可以简单的使用 "),s("code",[t._v(".umirc.js")]),t._v(" 来作为配置文件。当然它和 "),s("code",[t._v("config/config.js")]),t._v(" 是二选一的。更多说明可以参考 umi 的"),s("a",{attrs:{href:"https://umijs.org/guide/config.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("config/config.js")]),t._v(" 中初始化的内容如下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("一开始它只是 export 了一个默认的空的对象 "),s("code",[t._v("{}")]),t._v("，并没有什么作用，但是在后面我们会用到。")]),t._v(" "),s("p",[t._v("我们所说的页面是指由一个独立路由对应的 UI 界面，关于路由你后续可以在"),s("a",{attrs:{href:"ipsba8"}},[t._v("《路由配置》")]),t._v("中了解更多。在这一章节中你只需要知道对于这个例子，就是指我们期望通过浏览器访问 "),s("code",[t._v("/helloworld")]),t._v(" 的时候可以得到一个显示 "),s("code",[t._v("hello world")]),t._v(" 的页面。")]),t._v(" "),s("p",[t._v("首先我们新建一个 "),s("code",[t._v("src")]),t._v(" 目录，它用来存放项目的除了配置以及单测以外的主要代码。")]),t._v(" "),s("p",[t._v("在 umi 中，约定的存放页面代码的文件夹是 "),s("code",[t._v("pages")]),t._v("，是复数，不过如果你喜欢单数的话你配置项中你可以添加 "),s("code",[t._v("singular")]),t._v(" 为 "),s("code",[t._v("true")]),t._v(" 来让 "),s("code",[t._v("page")]),t._v(" 变为约定的文件夹。在本课程中我们使用单数来作为约定目录。所以你需要修改配置文件为：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  singular"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("接下来让我们创建第一个页面组件，新建 "),s("code",[t._v("src/page/HelloWorld.js")]),t._v(" 文件，代码如下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("hello world"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这样第一个页面就创建完成了，代码的具体含义我们会在后面的章节介绍。接下来你就可以通过 umi 来启动你的代码了。首先你需要在 "),s("code",[t._v("package.json")]),t._v(" 中的 "),s("code",[t._v("scripts")]),t._v(" 里面添加两个命令：")]),t._v(" "),s("div",{staticClass:"language-diff extra-class"},[s("pre",{pre:!0,attrs:{class:"language-diff"}},[s("code",[t._v('{\n  "scripts": {\n'),s("span",{pre:!0,attrs:{class:"token inserted"}},[t._v('+   "dev": "umi dev",')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token inserted"}},[t._v('+   "build": "umi build"')]),t._v("\n  }\n}\n")])])]),s("p",[s("code",[t._v("scripts")]),t._v(" 中定义的命令，可以在项目根目录中通过 "),s("code",[t._v("cnpm run [scriptname]")]),t._v(" 来运行。接下来请执行：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("cnpm run dev\n")])])]),s("p",[t._v("修改 "),s("code",[t._v("package.json")]),t._v(" 的时候要注意它是一个标准的 JSON 格式的文件，如果失败请检查是不是逗号或者引号的问题。如果顺利，项目将会运行起来。你将会在命令行中看到如下的日志：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.yuque.com/lark/0/2018/png/46271/1529466155453-49caf373-ae08-4fb9-a0a1-a498455a4be2.png",alt:"console"}})]),t._v(" "),s("p",[t._v("复制日志中的地址，比如 "),s("code",[t._v("http://localhost:8000/")]),t._v("（这里的端口可能会因为被占用或者其他原因而不同，请参考你的机器中实际打印出来的地址）。并在后面加上 "),s("code",[t._v("helloworld")]),t._v(" 的路径后（比如 "),s("code",[t._v("http://localhost:8000/helloworld")]),t._v("）在浏览器中打开，然后你将会看到：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.yuque.com/lark/0/2018/png/46271/1529466372044-33a27264-8160-4cc1-98a5-7fc5f0d0aaef.png",alt:"result"}})]),t._v(" "),s("p",[t._v("在 umi 中，你可以使用约定式的路由，在 "),s("code",[t._v("page")]),t._v(" 下面的 JS 文件都会按照文件名映射到一个路由，比如上面这个例子，访问 "),s("code",[t._v("/helloworld")]),t._v(" 会对应到 "),s("code",[t._v("HelloWorld.js")]),t._v("。")]),t._v(" "),s("p",[t._v("除了约定式的路由，你也可以使用配置式的路由。至于使用哪种路由取决于你的喜好，这不是本课程的重点。在本课程中为了让开发者更好的理解路由组件嵌套，我们会使用配置式的路由。")]),t._v(" "),s("p",[t._v("要使用配置式的路由，你需要在配置文件 "),s("code",[t._v("config/config.js")]),t._v(" 中添加如下配置：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  routes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    component"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./HelloWorld'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("其中 component 是一个字符串，它是相对于 "),s("code",[t._v("page")]),t._v(" 目录的相对路径。在上面的配置中我们将路由的路径配置成为了 "),s("code",[t._v("/")]),t._v("，这样你访问 "),s("code",[t._v("http://localhost:8000/")]),t._v(" 首页就能看到 "),s("code",[t._v("hello world")]),t._v(" 了。")]),t._v(" "),s("p",[t._v("当有了 routes 的配置之后 umi 就不会再执行约定式对应的路由逻辑了，而是直接使用你通过配置声明的路由。关于路由的更多信息你可以参考"),s("a",{attrs:{href:"ipsba8"}},[t._v("《路由配置》")]),t._v("这一章节的说明。")]),t._v(" "),s("h3",{attrs:{id:"添加-umi-plugin-react-插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加-umi-plugin-react-插件","aria-hidden":"true"}},[t._v("#")]),t._v(" 添加 umi-plugin-react 插件")]),t._v(" "),s("p",[t._v("umi 是一个可插拔的企业级 react 应用框架，它的很多功能都是通过插件实现。尤其是 umi 官方的 "),s("a",{attrs:{href:"https://umijs.org/zh/plugin/umi-plugin-react.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("umi-plugin-react"),s("OutboundLink")],1),t._v(" 这个插件集成了常用的一些进阶的功能，为了后面的课程需要，我们需要添加该插件集到项目中。")]),t._v(" "),s("p",[t._v("首先通过 "),s("code",[t._v("cnpm install umi-plugin-react --save-dev")]),t._v(" 来安装该插件集。然后在配置文件 "),s("code",[t._v("config/config.js")]),t._v(" 中引入该插件：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'umi-plugin-react'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里暂时还没有添加配置，该插件还不会有作用，我们会在后面的课程按照需求打开相应的配置")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  routes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    component"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./HelloWorld'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"gitignore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gitignore","aria-hidden":"true"}},[t._v("#")]),t._v(" .gitignore")]),t._v(" "),s("p",[t._v("cnpm 安装的依赖会被默认安装到项目的 "),s("code",[t._v("node_modules")]),t._v(" 目录下。这个目录通常是不需要提交到代码仓库中的。如果你使用的是 git 来作为代码的管理工具，那么你可以添加 "),s("code",[t._v(".gitignore")]),t._v(" 文件到项目根目录中，避免将不必要的代码提交到 git 仓库中。")]),t._v(" "),s("p",[s("code",[t._v(".gitignore")]),t._v(" 如下：")]),t._v(" "),s("pre",[s("code",[t._v("node_modules\ndist\n.umi\n")])]),t._v(" "),s("p",[t._v("其中 "),s("code",[t._v(".umi")]),t._v(" 是 umi 在开发过程中产生的临时入口文件，便于开发调试，同样也不需要提交到代码仓库中。"),s("code",[t._v("dist")]),t._v(" 是构建出来的产物，通常也不需要提交。")]),t._v(" "),s("p",[t._v("我们建议你可以在本地通过 git 管理起你的代码，方便在后面的课程中更好的操作你的代码。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" add -A\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'init'")]),t._v("\n")])])]),s("h2",{attrs:{id:"构建和部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建和部署","aria-hidden":"true"}},[t._v("#")]),t._v(" 构建和部署")]),t._v(" "),s("p",[t._v("你可以通过 "),s("code",[t._v("cnpm run build")]),t._v(" 来构建出最终的产物，执行该命令后会生成最终的 HTML、CSS 和 JS 到 "),s("code",[t._v("dist")]),t._v(" 目录下。它们是浏览器可以直接识别并运行的代码，这样你就可以将它们部署到你想要的服务器上了。")]),t._v(" "),s("p",[t._v("需要注意的是，如果你直接用浏览器打开 HTML 那是无法正确展示的，因为直接打开无法识别出 HTML 引入的 JS 和 CSS 的路径。你需要确保的的 HTML 在一个 HTTP 的 web 容器中，并保证对应的页面的访问路径正确。比如使用 "),s("a",{attrs:{href:"https://github.com/zeit/serve",target:"_blank",rel:"noopener noreferrer"}},[t._v("serve"),s("OutboundLink")],1),t._v("：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("cnpm "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" serve -g\nserve ./dist\n")])])]),s("p",[t._v("更多关于部署的问题可以查看 umi 的"),s("a",{attrs:{href:"https://umijs.org/zh/guide/getting-started.html#%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83",target:"_blank",rel:"noopener noreferrer"}},[t._v("部署文档"),s("OutboundLink")],1),t._v("。")])])},[],!1,null,null,null);a.default=n.exports}}]);